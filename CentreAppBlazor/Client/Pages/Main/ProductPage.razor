@page "/ProductPage"
@inherits BaseCrud<Products>
@attribute [Authorize]

<div class="d-flex">
    <div class="">
        <div class="h5">Продукты </div>
    </div>
    @*<div class="">
        <RadzenCheckBox @bind-Value="IsResponsive" TriState="false" Name="CheckBox1" />
        <RadzenLabel Text="Режим поиска" Component="CheckBox1" Style="margin-left: 5px;margin-bottom: 20px" />

    </div>*@
</div>
<RadzenPanel AllowCollapse="true" Collapsed="true">
    <ChildContent>
        <RadzenTemplateForm TItem="Products" Data="dataform" Submit="@OnSubmit" InvalidSubmit="@OnInvalidSubmit">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-6">
                        <RadzenLabel Text="Имя" />
                        <br />
                        <RadzenTextBox Style="width:100%" Name="Name" @bind-Value="dataform.Name" />
                        <br />
                        <RadzenRequiredValidator Component="@nameof(Products.Name)" Popup="false" Text="Значение должно быть заполнено!" />
                        <RadzenRegexValidator Component="@nameof(Products.Name)" Text="Есть пробел в начале" Pattern="@(@"(^\S+[\s\S]*)+$")" />
                    </div>
                    <div class="col-md-6">
                        <RadzenLabel Text="Описание" />
                        <br />
                        <RadzenTextBox Name="@nameof(Products.Description)" Style="width:100%" @bind-Value="dataform.Description" />
                        <br />
                    </div>
                    <div class="col-md-6">
                        <RadzenLabel Text="Код" />
                        <br />
                        <RadzenTextBox Name="@nameof(Products.Code)" Style="width:100%" @bind-Value="dataform.Code" />
                        <br />
                    </div>
                    <div class="col-md-6">
                        <RadzenLabel Text="Лимит" />
                        <br />
                        <RadzenNumeric Name="@nameof(Products.Limit)" Style="width:100%" @bind-Value="dataform.Limit" />
                        <br />
                    </div>
                    <div class="col-md-6">
                        <RadzenLabel Text="Тип продукта" />
                        <br />
                        <RadzenDropDown @bind-Value="dataform.ProductTypeId" Data="producttype" Placeholder="Выберите Тип Продукта" AllowFiltering="true" AllowColumnResize="true" AllowClear="true" TextProperty="@nameof(ProductTypes.Name)" ValueProperty="@nameof(ProductTypes.Id)" Name="@nameof(Products.ProductTypeId)" Style="width:100%" />
                        <br />
                    </div>
                    <div class="col-md-6">
                        <RadzenLabel Text="Единица измерения" />
                        <br />
                        <RadzenDropDown @bind-Value="dataform.UnitId" Data="unit" Placeholder="Выберите единицу" AllowFiltering="true" AllowColumnResize="true" AllowClear="true" TextProperty="@nameof(Units.Name)" ValueProperty="@nameof(Units.Id)" Name="@nameof(Products.UnitId)" Style="width:100%" />
                        <br />
                    </div>
                </div>
                <div class="m-3 float-right">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Добавить"></RadzenButton>
                </div>
            </div>
        </RadzenTemplateForm>
    </ChildContent>
</RadzenPanel>


<RadzenDataGrid @ref="Grid" AllowFiltering="true" AllowColumnResize="true" AllowPaging="true" Count="@Count" PageSize="10"  FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            AllowSorting="true" Data="DataSource" LoadData="LoadData" TItem="Products" ColumnWidth="200px" RowUpdate="@OnUpdateRow">
    <Columns>
        <RadzenDataGridColumn TItem="Products" Property="@nameof(Products.Id)" Visible="false" />
        <RadzenDataGridColumn Width="200px" TItem="Products" Property="@nameof(Products.Name)" Title="Имя">
            <Template Context="vdata">
                <span class="text-wrap">@vdata.Name</span>
            </Template>
            <EditTemplate Context="vdata">
                <RadzenTextBox @bind-Value="vdata.Name" Name="Name" Style="width:100%" />
                <br />
                <RadzenRequiredValidator Component="Name" Text="Заполните поле" />
                <RadzenRegexValidator Component="Name" Text="Есть пробел в начале" Pattern="@(@"(^\S+[\s\S]*)+$")" />
            </EditTemplate>

        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="170px" TItem="Products" Property="@nameof(Products.Description)" Title="Описание">
            <Template Context="vdata">
                <span class="text-wrap">@vdata.Description</span>
            </Template>
            <EditTemplate Context="vdata">
                <RadzenTextBox @bind-Value="vdata.Description" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="100px" TItem="Products" Property="@nameof(Products.Code)" Title="Код" TextAlign="TextAlign.Center">
            <Template Context="vdata">
                <span class="text-wrap">@vdata.Code</span>
            </Template>
            <EditTemplate Context="vdata">
                <RadzenTextBox @bind-Value="vdata.Code" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="100px" TItem="Products" Property="@nameof(Products.RemainCount)" Title="Остаток" TextAlign="TextAlign.Center">
            <Template Context="vdata">
                <span class="text-wrap @(vdata.RemainCount <= vdata.Limit ? "text-danger" : "")">@vdata.RemainCount</span>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="80px" TItem="Products" Property="@nameof(Products.Limit)" Title="Лимит" TextAlign="TextAlign.Center">
            <Template Context="vdata">
                <span class="text-wrap">@vdata.Limit</span>
            </Template>
            <EditTemplate Context="vdata">
                <RadzenNumeric @bind-Value="vdata.Limit" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="130px" TItem="Products" Property="@nameof(Products.ProductTypeId)" Title="Тип продукта" TextAlign="TextAlign.Center">
            <Template Context="vdata">
                <span class="text-wrap">@producttype.FirstOrDefault(x => x.Id == vdata.ProductTypeId)?.Name</span>
            </Template>
            <EditTemplate Context="vdata">
                <RadzenDropDown AllowClear="true" Placeholder="Выберите Тип" @bind-Value="vdata.ProductTypeId" Data="producttype" TextProperty="@nameof(ProductTypes.Name)" ValueProperty="@nameof(ProductTypes.Id)" Name="@nameof(Products.ProductTypeId)" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="100px" TItem="Products" Property="@nameof(Products.UnitId)" Title="Ед.изм" TextAlign="TextAlign.Center">
            <Template Context="vdata">
                <span class="text-wrap">@unit.FirstOrDefault(x => x.Id == vdata.UnitId)?.Name</span>
            </Template>
            <EditTemplate Context="vdata">
                <RadzenDropDown AllowClear="true" Placeholder="Выберите Тип" @bind-Value="vdata.UnitId" Data="unit" TextProperty="@nameof(Units.Name)" ValueProperty="@nameof(Units.Id)" Name="@nameof(Products.UnitId)" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Products" Context="dsource"  Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
            <Template Context="dsource">
                <RadzenButton Icon="edit" Size="ButtonSize.Medium" Click="@(args => EditRow(dsource))">
                </RadzenButton>
            </Template>
            <EditTemplate Context="dsource">
                <RadzenButton Icon="save" Size="ButtonSize.Medium" Click="@((args) => SaveRow(dsource))">
                </RadzenButton>
                <RadzenButton Icon="cancel" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(dsource))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Products" Context="dsource"  Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
            <Template Context="dsource">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Medium" Click="@(args => DeleteConfirmation(dsource))">
                </RadzenButton>
            </Template>
            <EditTemplate Context="dsource">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Medium" Click="@(args => DeleteConfirmation(dsource))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>

</RadzenDataGrid>


@code {
    protected override string ApiUrl { get; set; } = "api/Products";

    public int Count { get; set; }

    async Task DeleteConfirmation(Products dat) => await DialogService.OpenAsync("Подтверждение", ds =>
    @<RadzenCard Style="padding: 20px;">
        <p Style="margin-bottom: 10px;">Вы действительно хотите удалить "@dat.Name"?</p>
        <div class="row">
            <div class="col-md-8">
                <RadzenButton Text="Да" Click="args=>OkDialog(dat)" Style="margin-bottom: 10px; width: 150px" />
                <RadzenButton Text="Отмена" Click="CancelDialog" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px" />
            </div>
        </div>
    </RadzenCard>);

    IEnumerable<ProductTypes> producttype = new List<ProductTypes>();
    IEnumerable<Units> unit = new List<Units>();
    IEnumerable<Products> DataSource;
    protected async override Task GetForDropDown()
    {

        producttype = await serv.GetAsync<IEnumerable<ProductTypes>>("api/ProductTypes");
        unit = await serv.GetAsync<IEnumerable<Units>>("api/Units");
    }
    async Task LoadData(LoadDataArgs args)
    {
        try
        {
            loading.Visible = true;
            var result = await serv.GetAsync<ResponseMessage<List<Products>>>($"api/Products?Filter={args.Filter}&OrderBy={args.OrderBy}&Skip={args.Skip}&Top={args.Top}");
            Count = result.TCount.Value;
            DataSource = result.entity;

        }
        catch (Exception)
        {
            await ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Ошибка", Detail = "Ошибка при получении данных", Duration = 2500 });
        }
        finally
        {
            loading.Visible = false;
        }
    }

    protected override Task GetData()
    {
        return Task.CompletedTask;
    }
    protected async override Task DeleteData(int Id)
    {
        await serv.DeleteAsync(Id, ApiUrl);
        DataSource = DataSource.Where(x => x.Id != Id).ToList();

    }
}



