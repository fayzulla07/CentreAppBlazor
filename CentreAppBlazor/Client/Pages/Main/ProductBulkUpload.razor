@page "/ProductBulkUpload"
@using System.Net.Http.Json
@inject HttpClient http
@inject IAppService appService
<h3>Импорт из накладного</h3>

<div class="row m-2">
    <div class="m-1"><RadzenLabel Text="цена продажи=цена прихода+%" Component="SalePercent" /></div>
    <div class="m-1"><RadzenNumeric Name="SalePercent" @bind-Value="SalePercent" /></div>
    <div class="m-1">
        <RadzenLabel Text="Курс $" Component="Kurs" />
    </div>
    <div class="m-1">
        <RadzenNumeric Min="1" Name="Kurs" @bind-Value="Kurs" />
    </div>
    <div class="m-1">
        <RadzenDropDown Data="suppliers" @bind-Value="@selectedSupplierId"
                        AllowFiltering="true" ValueProperty="Id" TextProperty="Name" Placeholder="выберите поставщика" />
    </div>
    <div class="m-1">
        <RadzenCheckBox TriState="false" Name="AddIncomes" @bind-Value="AddIncomes" Placeholder="Добавить в приход?" />
    </div>
    <div class="m-1">
        <RadzenLabel text="добавить в приход?" component="addincomes" />
     </div>
    <div class="m-1">
        <InputFile OnChange="((args)=>Upload1Cfile(args))" accept=".xlsx"></InputFile>
    </div>
</div>
    <RadzenDataGrid @ref="Grid" AllowFiltering="true" FilterMode="FilterMode.Simple"
                    AllowColumnResize="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true" Data="@Data1" TItem="ProductTypes">
        <Columns>
            <RadzenDataGridColumn TItem="ProductTypes" Property="@nameof(ProductTypes.Name)" Title="Имя">
                <Template Context="vdata">
                    @vdata.Name (@(vdata.Products.Count()) шт.)
                </Template>
                <FooterTemplate>
                    <b>колич:   </b>@( TotalCount )
                </FooterTemplate>
            </RadzenDataGridColumn>
        </Columns>
        <Template Context="data">
            @*<RadzenTabs>
                <Tabs>
                    <RadzenTabsItem Text="Products">*@
            <RadzenDataGrid Data="data.Products" TItem="Products" AllowColumnResize="true" >
                <Columns>
                    <RadzenDataGridColumn TItem="Products" Property="Code" Title="Code">
                        <Template Context="vdata">
                            @vdata.Code
                        </Template>
                        <FooterTemplate>
                            <b>колич группы: </b> @(data.Products.Select(p=>p.Id).Count())
                        </FooterTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Products" Property="Volume" Title="Volume">
                        <Template Context="vdata">
                            @vdata.Volume
                        </Template>
                    </RadzenDataGridColumn>
                    @*<RadzenDataGridColumn TItem="Products" Property="Amount" Title="Amount">
                        <Template Context="vdata">
                            @vdata.Amount
                        </Template>
                    </RadzenDataGridColumn>*@
                    <RadzenDataGridColumn TItem="Products" Property="Name" Title="Name">
                        <Template Context="vdata">
                            @vdata.Name
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Products" Property="Description" Title="Description">
                        <Template Context="vdata">
                            @vdata.Description
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Products" Property="IncomeCost" Title="Цена приходная">
                        <Template Context="vdata">
                            @vdata.ProductIncoms.First().IncomeCost
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Products" Property="SaleCost" Title="цена продажи">
                        <Template Context="vdata">
                            @vdata.ProductIncoms.First().SaleCost
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Products" Property="Kurs" Title="Курс">
                        <Template Context="vdata">
                            @vdata.ProductIncoms.First().Kurs
                        </Template>
                    </RadzenDataGridColumn>


                </Columns>
            </RadzenDataGrid>

            @*</RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>*@
        </Template>

    </RadzenDataGrid>

    <RadzenButton BusyText="Загрузка данных..." Click="@SaveToDb" IsBusy="@isLoading"
                  Text="Импорт в базу данных"></RadzenButton>

    @code {
        RadzenDataGrid<ProductTypes> Grid;
        [Inject]
        private NotificationService notificationService { get; set; }
        //List<ProductTypes> data = new List<ProductTypes>();
        public List<ProductTypes> Data1 { get; set; }
        public double Kurs { get; set; } = 1;
        public bool AddIncomes { get; set; } = true;
        public decimal SalePercent { get; set; } = 10;
        public decimal OptPercent { get; set; }
        [Inject]
        public IAppService serv { get; set; }
        bool isLoading = false;
        async void SaveToDb()
        {
            count = 0;
            int num = await serv.GetAsync<int>($"api/Main/GetLastIncomeNumber");

            isLoading = true;
            if (Data1.Any())
            {
                SaveProductTypes();
                SaveProducts(num);
                //var k = AddIncomes?SaveIncomes() : false;
            }
            isLoading = false;
            await ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Успешно", Detail = $"Успешно сохранен !", Duration = 4500 });

            StateHasChanged();
        }
        List<ProductTypes> ptList;
        async void SaveProductTypes()
        {
            ptList = await serv.GetAsync<List<ProductTypes>>($"api/{nameof(ProductTypes)}");
            foreach (var item in Data1)
            {
                Console.WriteLine(item.Name);
                if (ptList.Where(x => x.Name.Equals(item.Name)).Count() == 0)
                {
                    ProductTypes pt = new ProductTypes();
                    pt.Name = item.Name;
                    await serv.InsertAsync<ProductTypes>(pt, $"api/{nameof(ProductTypes)}");
                    ptList.Add(pt);
                }
            }
        }
        async void SaveProducts(int num)
        {
            List<Products> res = await serv.GetAsync<List<Products>>($"api/{nameof(Products)}/getproducts");
            List<Units> units = await serv.GetAsync<List<Units>>($"api/{nameof(Units)}");

            foreach (var item1 in Data1)
                foreach (var item in item1.Products)
                {
                    if (!res.Where(x => x.Code.Equals(item.Code)).Any())
                    {
                        Products p = new Products();
                        p.ProductIncoms = null;
                        p.RemainCount = 0;
                        p.UnitId = units.FirstOrDefault().Id;
                        int id = ptList.Where(p => p.Name == item1.Name).Select(i => i.Id).FirstOrDefault();
                        p.ProductTypeId = id;
                        p.ProductType = null;
                        p.Name = item.Name;
                        p.Volume = item.Volume;
                        p.Code = item.Code;
                        p.Description = p.Description;
                        p.Limit = 1;

                        await serv.InsertAsync<Products>(p, "api/Products");

                    }
                    if (AddIncomes)
                    {
                        int id = res.Where(p => p.Code.Equals(item.Code)).Select(x => x.Id).FirstOrDefault();
                        foreach (var pi in item.ProductIncoms)
                        {
                            pi.ProductId = id;
                            var r = new List<ProductIncoms>();
                            r.Add(new ProductIncoms
                            {
                                Amount = pi.Amount,
                                IncomeCost = pi.IncomeCost,
                                ProductId = pi.ProductId,
                                SaleCost = pi.SaleCost,
                                RegDt = DateTime.Now,
                                Comments = "Импорт из файла",
                                SupplierId = selectedSupplierId,
                                OptCost = pi.OptCost,
                                IncomeNumber=num
                            });
                            SaveIncomes(r);
                        }
                    }
                }
        }
        int count;
        async void SaveIncomes(List<ProductIncoms> pi)
        {

            ResponseMessage<int> executed = await serv.PostAsync<ResponseMessage<int>>(pi, "api/Main/CloseIncomeOrder");
            if (executed.IsSuccessCode)
            {

                count++;
            }
            else
            {
                await ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Ошибка", Detail = "Ошибка при сохранении данных", Duration = 5500 });

            }
        }
        protected async Task ShowNotification(NotificationMessage message)
        {
            notificationService.Notify(message);
            await InvokeAsync(StateHasChanged);
        }
        List<Suppliers> suppliers = new List<Suppliers>();
        int selectedSupplierId;
        protected async override Task OnInitializedAsync()
        {
            suppliers = await serv.GetAsync<List<Suppliers>>($"api/{nameof(Suppliers)}");
            selectedSupplierId = suppliers.FirstOrDefault().Id;
        }
        async Task Upload1Cfile(InputFileChangeEventArgs args)
        {
            var content = new byte[args.File.Size];
            using var stream = args.File.OpenReadStream(args.File.Size);
            await stream.ReadAsync(content);



            Helper helper = new Helper();
            Data1 = helper.Read1CExcel(content, AddIncomes, Kurs, SalePercent);
            int s = 0;
            foreach (var item in Data1)
            {
                s = s + item.Products.Count();
            }
            TotalCount = s;
            StateHasChanged();
        }
        public int TotalCount { get; set; }
    }
