@page "/HistorySalePage"
@inherits BaseCrud<HistorySaleView>
@attribute [Authorize]

<div class="d-flex">
    <div class="">
        <div class="h5">История продажи </div>
    </div>
    @*<div class="">
        <RadzenCheckBox @bind-Value="IsResponsive" TriState="false" Name="CheckBox1" />
        <RadzenLabel Text="Режим поиска" Component="CheckBox1" Style="margin-left: 5px;margin-bottom: 20px" />

    </div>*@
</div>


<RadzenDataGrid @ref="Grid" AllowGrouping="true" AllowFiltering="true" AllowColumnResize="true" AllowPaging="true" PageSize="20" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            AllowSorting="true" Data="@DataSource" LoadData="LoadData" Count="Count" TItem="HistorySaleView" ColumnWidth="200px" RowUpdate="@OnUpdateRow" FilterMode="FilterMode.Simple">
    <Columns>
        <RadzenDataGridColumn TItem="HistorySaleView" Property="@nameof(HistorySaleView.Id)" Visible="false" />

        <RadzenDataGridColumn Width="80px" TItem="HistorySaleView" Property="@nameof(HistorySaleView.OrderNumber)" Title="#" TextAlign="TextAlign.Center">
            <Template Context="vdata">
                <span class="text-wrap">@vdata.OrderNumber</span>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="250px" TItem="HistorySaleView" Property="@nameof(HistorySaleView.Name)" Title="Имя">
            <Template Context="vdata">
                <span class="text-wrap">@vdata.Name</span>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="150px" TItem="HistorySaleView" Property="@nameof(HistorySaleView.UserName)" Title="Имя Сотрудника">
            <Template Context="vdata">
                <span class="text-wrap">@vdata.UserName</span>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="120px" TItem="HistorySaleView" Property="@nameof(HistorySaleView.AmountUnit)" Title="Количество" TextAlign="TextAlign.Center">
            <Template Context="vdata">
                <span class="text-wrap">@vdata.Amount</span>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="120px" TItem="HistorySaleView" Property="@nameof(HistorySaleView.IncomeCost)" Title="Цена прихода" TextAlign="TextAlign.Center">
            <Template Context="vdata">
                <span class="text-wrap">@vdata.IncomeCost.ToString("C0", new CultureInfo("en-US"))</span>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="120px" TItem="HistorySaleView" Property="@nameof(HistorySaleView.SaleCost)" Title="Цена продажи" TextAlign="TextAlign.Center">
            <Template Context="vdata">
                <span class="text-wrap">@vdata.SaleCost.ToString("C0", new CultureInfo("en-US"))</span>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="120px" TItem="HistorySaleView" Property="@nameof(HistorySaleView.SaleCost)" Title="Общ(тг)" TextAlign="TextAlign.Center">
            <Template Context="vdata">
                <span class="text-wrap">@((vdata.SaleCost * (decimal)vdata.Amount).ToString("C0", new CultureInfo("kk-KZ")))</span>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="100px" TItem="HistorySaleView" Property="@nameof(HistorySaleView.RegDt)" Title="Дата рег" TextAlign="TextAlign.Center">
            <Template Context="vdata">
                <span class="text-wrap">@vdata.RegDt</span>
            </Template>
        </RadzenDataGridColumn>

        @*<RadzenDataGridColumn Width="80px" TItem="HistorySaleView" Property="@nameof(HistorySaleView.OptCost)" Title="Оптовая?" TextAlign="TextAlign.Center">
            <Template Context="vdata">
                <span class="text-wrap">@vdata.OptCost</span>
            </Template>
        </RadzenDataGridColumn>*@

        <RadzenDataGridColumn Width="80px" TItem="HistorySaleView" Property="@nameof(HistorySaleView.IsBank)" Title="Банк?" TextAlign="TextAlign.Center">
            <Template Context="vdata">
                <RadzenCheckBox TValue="bool" Value="vdata.IsBank.Value" Disabled="true" />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="150px" TItem="HistorySaleView" Property="@nameof(HistorySaleView.Comments)" Title="Коммент">
            <Template Context="vdata">
                <span class="text-wrap">@vdata.Comments</span>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="HistorySaleView" Filterable="false" Sortable="false" Property="@nameof(ProductIncoms.IncomeNumber)" Width="60px">
            <Template Context="vdata">
                <RadzenButton Icon="assignment" Click="async(args)=> { await GetFile(vdata.OrderNumber); }"></RadzenButton>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="HistorySaleView" Context="dsource" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
            <Template Context="dsource">
                <RadzenButton ButtonStyle="ButtonStyle.Warning" Icon="assignment_return" Size="ButtonSize.Medium" Click="@(args => Conf(dsource))">
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="HistorySaleView" Context="dsource" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
            <Template Context="dsource">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Medium" Click="@(args => DeleteConfirmation(dsource))">
                </RadzenButton>
            </Template>
            <EditTemplate Context="dsource">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Medium" Click="@(args => DeleteConfirmation(dsource))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>

</RadzenDataGrid>


@code {
    protected override string ApiUrl { get; set; } = "api/HistorySale";
    IEnumerable<HistorySaleView> DataSource;
    int Count;


    async Task DeleteConfirmation(HistorySaleView dat) => await DialogService.OpenAsync("Подтверждение", ds =>
    @<RadzenCard Style="padding: 20px;">
        <p Style="margin-bottom: 10px;">Вы действительно хотите удалить "@dat.Name"?</p>
        <div class="row">
            <div class="col-md-8">
                <RadzenButton Text="Да" Click="args => OkDialog(dat)" Style="margin-bottom: 10px; width: 150px" />
                <RadzenButton Text="Отмена" Click="CancelDialog" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px" />
            </div>
        </div>
    </RadzenCard>);

async Task Conf(HistorySaleView dat) => await DialogService.OpenAsync("Возврат", ds =>
@<RadzenCard Style="padding: 20px;">
    <RadzenTemplateForm TItem="HistorySaleView" Data="dataform" Submit="(args)=>OnSubmitConf(dat)">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-6">
                    <RadzenLabel Text="Количество" />
                    <br />
                    <RadzenNumeric Min="1" Style="width:100%" Name="@nameof(HistorySaleView.Amount)" @bind-Value="dataform.Amount" />
                    <br />
                    <RadzenRequiredValidator Component="@nameof(HistorySaleView.Amount)" Popup="false" Text="Значение должно быть заполнено!" />
                    <RadzenCompareValidator Component="@nameof(HistorySaleView.Amount)" Operator="CompareOperator.LessThanEqual" Text="Значение должно быть меньше чем проданного!" Value="dat.Amount" />
                </div>
                <div class="col-md-6">
                    <RadzenLabel Text="Комментарии" />
                    <br />
                    <RadzenTextBox Name="Comments" Style="width:100%" @bind-Value="dataform.Comments" />
                    <br />

                </div>
            </div>
            <div class="m-3 float-right">
                <RadzenButton ButtonType="ButtonType.Submit" Text="Добавить"></RadzenButton>
            </div>
        </div>
    </RadzenTemplateForm>
</RadzenCard>);

    async void OnSubmitConf(HistorySaleView dat)
    {
        try
        {
            if(dataform.Amount <= 0)
            {
                await ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Предупреждение", Detail = "Укажите количество возврата больше чем 0", Duration = 2500 });
                return;
            }
            loading.Visible = true;
            dataform.RegDt = DateTime.Now;
            dataform.Id = dat.Id;

            var data = await serv.PostGetStringAsync<HistorySaleView>(dataform, "api/HistorySale");
            if(data == "true")
            {
                await ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Успешно", Detail = "Успешно отправлено", Duration = 2500 });
            }
            else
            {
                await ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Ошибка", Detail = data, Duration = 2500 });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Ошибка", Detail = "Ошибка при отправки данных", Duration = 2500 });
        }
        finally
        {
            loading.Visible = false;
            DialogService.Close();
        }

    }
    protected override Task UpdateData(HistorySaleView item)
    {
        return Task.CompletedTask;
    }
    async Task LoadData(LoadDataArgs args)
    {
        try
        {
            loading.Visible = true;
            var result = await serv.GetAsync<ResponseMessage<List<HistorySaleView>>>($"api/HistorySale?Filter={args.Filter}&OrderBy={args.OrderBy}&Skip={args.Skip}&Top={args.Top}");
            //var result = await serv.GetAsync<ResponseMessage<List<HistorySaleView>>>($"api/HistorySale?Filter={args.Filter}&OrderBy={args.OrderBy}&Skip={args.Skip}&Top={args.Top}");
            Count = result.TCount.Value;
            DataSource = result.entity;

        }
        catch (Exception)
        {
            await ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Ошибка", Detail = "Ошибка при получении данных", Duration = 2500 });
        }
        finally
        {
            loading.Visible = false;
        }

    }

    protected override Task GetData()
    {
        return Task.CompletedTask;
    }

    protected async override Task DeleteData(int Id)
    {
        await serv.DeleteAsync(Id, ApiUrl);
        DataSource = DataSource.Where(x => x.Id != Id).ToList();

    }

    [Inject]
    public IJSRuntime jSRuntime { get; set; }

    protected async Task GetFile(int? id)
    {
        var val = await serv.CallAsync($"api/HistorySale/GetInvoiceSale/{id}");
        await jSRuntime.InvokeVoidAsync("saveasFile", $"Накладная-{id}.xlsx", Convert.ToBase64String(await val.Content.ReadAsByteArrayAsync()));
    }
}



