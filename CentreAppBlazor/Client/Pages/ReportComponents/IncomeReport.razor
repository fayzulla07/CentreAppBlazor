
@attribute [Authorize(Roles = "admin, manager")]
@using CentreAppBlazor.Shared.Report
<div class="d-flex">
    <div class="">
        <RadzenCheckBox @bind-Value="IsResponsive" TriState="false" Name="CheckBox1" />
        <RadzenLabel Text="Режим поиска" Component="CheckBox1" Style="margin-left: 5px;margin-bottom: 20px" />
    </div>
</div>

<div class="mb-2">
    <RadzenDatePicker TValue="DateTime?" @bind-Value="da1" />
    <RadzenDatePicker TValue="DateTime?" @bind-Value="da2" />
    <RadzenButton Text="Получить" Click="GetClicked"></RadzenButton>
</div>


<RadzenGrid AllowFiltering="true" AllowPaging="true" Count="Count" PageSize="20" Responsive="@(!IsResponsive)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            AllowSorting="true" Data="@dsource" TItem="IncomeReportDto" ColumnWidth="200px">
    <Columns>
        <RadzenGridColumn Width="250px" TItem="IncomeReportDto" Property="@nameof(IncomeReportDto.Name)" Title="Имя">
            <Template Context="vdata">
                <span class="text-wrap">@vdata.Name</span>
            </Template>
            <FooterTemplate>
                <span class="text-wrap font-weight-bold">Итого: </span>
                <br />
                <span class="text-wrap font-weight-bold">Прибыль: </span>
            </FooterTemplate>
        </RadzenGridColumn>

        <RadzenGridColumn Width="100px" TItem="IncomeReportDto" Property="@nameof(IncomeReportDto.Amount)" Title="Кол-во(шт)" TextAlign="TextAlign.Center">
            <Template Context="vdata">
                <span class="text-wrap">@vdata.Amount</span>
            </Template>

        </RadzenGridColumn>

        <RadzenGridColumn Width="130px" TItem="IncomeReportDto" Property="@nameof(IncomeReportDto.SupplierName)" Title="Поставщик" TextAlign="TextAlign.Center">
            <Template Context="vdata">
                <span class="text-wrap">@vdata.SupplierName</span>
            </Template>
        </RadzenGridColumn>

        <AuthorizeView Roles="admin">
            <Authorized>
                <RadzenGridColumn Width="100px" TItem="IncomeReportDto" Property="@nameof(IncomeReportDto.IncomeCost)" Title="Цена прихода" TextAlign="TextAlign.Center">
                    <Template Context="vdata">
                        <span class="text-wrap">@vdata.IncomeCost.ToString("C0", new CultureInfo("kk-KZ"))</span>
                    </Template>
                    <FooterTemplate>
                        <span class="text-wrap font-weight-bold">@dsource.Sum(x => x.IncomeCost * x.Amount).ToString("C0", new CultureInfo("kk-KZ")) </span>
                    </FooterTemplate>
                </RadzenGridColumn>
            </Authorized>
        </AuthorizeView>


        <RadzenGridColumn Width="100px" TItem="IncomeReportDto" Property="@nameof(IncomeReportDto.SaleCost)" Title="Цена продажа" TextAlign="TextAlign.Center">
            <Template Context="vdata">
                <span class="text-wrap">@vdata.SaleCost.ToString("C0", new CultureInfo("kk-KZ"))</span>
            </Template>
            <FooterTemplate>
                <AuthorizeView Roles="admin">
                    <Authorized>
                        <span class="text-wrap font-weight-bold">@dsource.Sum(x => x.SaleCost * x.Amount).ToString("C0", new CultureInfo("kk-KZ")) </span>
                        <br />
                        <span class="text-wrap font-weight-bold">@dsource.Sum(x => (x.SaleCost * x.Amount) - (x.IncomeCost * x.Amount)).ToString("C0", new CultureInfo("kk-KZ")) </span>

                    </Authorized>
                </AuthorizeView>
            </FooterTemplate>
        </RadzenGridColumn>

        <RadzenGridColumn Width="100px" TItem="IncomeReportDto" Property="@nameof(IncomeReportDto.OptCost)" Title="Отповая цена" TextAlign="TextAlign.Center">
            <Template Context="vdata">
                <span class="text-wrap">@vdata.OptCost.ToString("C0", new CultureInfo("kk-KZ"))</span>
            </Template>
            <FooterTemplate>
                <AuthorizeView Roles="admin">
                    <Authorized>
                        <span class="text-wrap font-weight-bold">@dsource.Sum(x => x.OptCost * x.Amount).ToString("C0", new CultureInfo("kk-KZ")) </span>
                        <br />
                        <span class="text-wrap font-weight-bold">@dsource.Sum(x => (x.OptCost * x.Amount) - (x.IncomeCost * x.Amount)).ToString("C0", new CultureInfo("kk-KZ")) </span>

                    </Authorized>
                </AuthorizeView>
            </FooterTemplate>
        </RadzenGridColumn>

        <RadzenGridColumn Width="120px" TItem="IncomeReportDto" Property="@nameof(IncomeReportDto.RegDt)" Title="Дата рег-ции" TextAlign="TextAlign.Center">
            <Template Context="vdata">
                <span class="text-wrap">@vdata.RegDt</span>
            </Template>
        </RadzenGridColumn>

        <RadzenGridColumn Width="130px" TItem="IncomeReportDto" Property="@nameof(IncomeReportDto.UserName)" Title="Пользователь" TextAlign="TextAlign.Center">
            <Template Context="vdata">
                <span class="text-wrap">@vdata.UserName</span>
            </Template>
        </RadzenGridColumn>
    </Columns>

</RadzenGrid>


@code {
    int Count;
    public bool IsResponsive { get; set; }
    List<IncomeReportDto> dsource = new List<IncomeReportDto>();
    [Inject]
    public IAppService serv { get; set; }
    [Inject]
    protected LoadingService loading { get; set; }
    [Inject]
    private NotificationService notificationService { get; set; }


    protected async Task ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
        await InvokeAsync(StateHasChanged);
    }


    DateTime? da1;
    DateTime? da2;

    async void GetClicked()
    {
        if (da1 == null) da1 = DateTime.Now.AddDays(-1);
        if (da2 == null) da2 = DateTime.Now.AddDays(1);

        try
        {
            loading.Visible = true;
            dsource = await serv.GetAsync<List<IncomeReportDto>>($"api/report/GetIncome?das1={da1.Value.ToString("yyyy-MM-dd")}&das2={da2.Value.ToString("yyyy-MM-dd")}");
            Count = dsource.Count;
        }
        catch (Exception)
        {
            await ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Ошибка", Detail = "Ошибка при получении данных", Duration = 2500 });
        }
        finally
        {
            loading.Visible = false;
            await InvokeAsync(StateHasChanged);
        }
    }

}



