@attribute [Authorize]
@using CentreAppBlazor.Shared.Report
<div class="d-flex">
    <div class="">
        <RadzenCheckBox @bind-Value="IsResponsive" TriState="false" Name="CheckBox1" />
        <RadzenLabel Text="Режим поиска" Component="CheckBox1" Style="margin-left: 5px;margin-bottom: 20px" />

    </div>
</div>

<div class="mb-2">
    <RadzenDatePicker TValue="DateTime?" @bind-Value="da1" />
    <RadzenDatePicker TValue="DateTime?" @bind-Value="da2" />
    <RadzenButton Text="Получить" Click="GetClicked"></RadzenButton>
    <RadzenButton Text="Скачать" Icon="get_app" Click="GetFile" />
</div>

<div class="m-2">
    <SaleReport IsResponsive="IsResponsive" dsource="dsource.sale"></SaleReport>
</div>
<div class="m-2">
    <ReturnReport IsResponsive="IsResponsive" dsource="dsource.returns"></ReturnReport>
</div>


@code {
    public bool IsResponsive;

    SaleReturnReportDto dsource = new SaleReturnReportDto() { returns = new List<ReturnReportDto>(), sale = new List<SaleReportDto>() };
    [Inject]
    public IAppService serv { get; set; }
    [Inject]
    protected LoadingService loading { get; set; }
    [Inject]
    private NotificationService notificationService { get; set; }

    [Inject]
    public IJSRuntime JS { get; set; }

    protected async Task ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
        await InvokeAsync(StateHasChanged);
    }



    DateTime? da1;
    DateTime? da2;

    async void GetClicked()
    {
        if (da1 == null) da1 = DateTime.Now.AddDays(-1);
        if (da2 == null) da2 = DateTime.Now.AddDays(1);

        try
        {
            loading.Visible = true;
            dsource = await serv.GetAsync<SaleReturnReportDto>($"api/report/GetSale?das1={da1.Value.ToString("yyyy-MM-dd")}&das2={da2.Value.ToString("yyyy-MM-dd")}");
            if(dsource.sale.Count <= 0)
                await ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Инфо", Detail = "Нет данных по этой дате", Duration = 2500 });

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Ошибка", Detail = "Ошибка при получении данных", Duration = 2500 });
        }
        finally
        {
            loading.Visible = false;
            await InvokeAsync(StateHasChanged);
        }
    }
    private async Task GetFile()
    {
        try
        {
            if (da1 == null) da1 = DateTime.Now.AddDays(-1);
            if (da2 == null) da2 = DateTime.Now.AddDays(1);
            loading.Visible = true;
            var val = await serv.CallAsync($"api/report/GetSaleExcel?das1={da1.Value.ToString("yyyy-MM-dd")}&das2={da2.Value.ToString("yyyy-MM-dd")}");

            await JS.InvokeVoidAsync("saveasFile", "SaleReturn.xlsx", Convert.ToBase64String(await val.Content.ReadAsByteArrayAsync()));
        }
        catch (Exception ex)
        {
            await ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Ошибка", Detail = "Ошибка при получении файла", Duration = 2500 });
        }
        finally
        {
            loading.Visible = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}



